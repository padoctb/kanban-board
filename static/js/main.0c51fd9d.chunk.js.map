{"version":3,"sources":["components/Task/Task.js","components/Dialog/Dialog.js","hocs/withModifyTask.js","components/AddTask/AddTask.js","components/EditTask/EditTask.js","components/Board/Board.js","App.js","index.js"],"names":["Task","this","props","taskData","priority","description","createDate","id","status","deleteTask","toggleEditTask","className","onClick","Date","toLocaleDateString","hour","minute","second","PureComponent","Dialog","toggleDialog","title","children","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","e","target","options","OriginComponent","state","descriptionInput","currentPriority","isValid","changeDescription","value","setState","changePriority","changeValid","Component","AddTask","toggleAddTask","addTask","onChange","name","length","now","Math","random","withModifyTask","EditTask","taskState","taskStatus","taskId","editTask","editPriority","taskDescription","taskPriority","Board","tasks","JSON","parse","localStorage","getItem","isAddTaskOpen","editTaskState","isOpen","newTasks","filter","task","setItem","stringify","event","newDescription","newPriority","forEach","elem","removeAllTasks","onDrop","data","column","closest","droppedColumnType","getAttribute","droppedTaskId","Number","Object","values","renderTasks","filteredTasks","sort","taskA","taskB","map","key","type","toLowerCase","data-status","types","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c51fd9d.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\nclass Task extends PureComponent {\n  render() {\n    const { priority, description, createDate, id, status } = this.props.taskData;\n    const deleteTask = this.props.deleteTask;\n    const toggleEditTask = this.props.toggleEditTask;\n\n    return (\n      <div className={`task-container ${priority}`}>\n        <div className=\"task-buttons\">\n          {(status === 'done' || status === 'aborted') && (\n            <button onClick={() => deleteTask(id)} className=\"task-btn task-delete-btn\" />\n          )}\n\n          {(status === 'doIt' || status === 'inProgress') && (\n            <button\n              onClick={() => toggleEditTask(this.props.taskData)}\n              className=\"task-btn task-edit-btn\"\n            />\n          )}\n        </div>\n\n        <div className=\"task-description\">{description}</div>\n        <div className=\"task-date\">\n          Created:{' '}\n          {new Date(createDate).toLocaleDateString('ru-RU', {\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nTask.propTypes = {\n  taskData: PropTypes.shape({\n    // данные необходимые для рендера инфы в таске\n    priority: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    createDate: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n  deleteTask: PropTypes.func.isRequired, // Board function\n};\n\nexport default Task;\n","import React from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nconst Dialog = ({toggleDialog, title, children}) => {\n  return (\n    <ReactCSSTransitionGroup\n      transitionName=\"dialog\"\n      transitionAppear={true}\n      transitionAppearTimeout={300}\n      transitionEnter={false}\n      transitionLeave={false}\n    >\n      <div\n        onClick={e =>\n          e.target.className === 'dialog-wrapper' || e.target.className === 'dialog-close-btn'\n            ? toggleDialog()\n            : null\n        }\n        className=\"dialog-wrapper\"\n      >\n        <div className=\"dialog-content\">\n          <button className=\"dialog-close-btn\" />\n\n          <h3 className=\"dialog-title\">{title}</h3>\n\n          {children}\n        </div>\n      </div>\n    </ReactCSSTransitionGroup>\n  );\n}\n\nDialog.propTypes = {\n  toggleDialog: PropTypes.func.isRequired, // закрытие / открытие диалога (состояние хранится наверху)\n  title: PropTypes.string,\n  children: PropTypes.node, // контент диалога\n};\n\nexport default Dialog;\n","import React, { Component } from 'react';\n\n// hoc для вынесения логики добавления / измнения задачи\n\nexport default options => OriginComponent =>\n  class withModifyTask extends Component {\n    state = {\n      descriptionInput: options(this.props).descriptionInput,\n      currentPriority: options(this.props).currentPriority,\n      isValid: true,\n    };\n\n    changeDescription = ({ target: { value } }) => {\n      this.setState({\n        descriptionInput: value,\n      });\n    };\n\n    changePriority = ({ target: { value } }) => {\n      this.setState({\n        currentPriority: value,\n      });\n    };\n\n    changeValid = (state) => {\n      this.setState({\n        isValid: state,\n      });\n    };\n\n    render() {\n      return (\n        <OriginComponent\n          changeValid={this.changeValid}\n          changePriority={this.changePriority}\n          changeDescription={this.changeDescription}\n          {...this.state}\n          {...this.props}\n        />\n      );\n    }\n  };\n","import React, { Component } from 'react';\nimport Dialog from '../Dialog/Dialog';\nimport './style.css';\nimport PropTypes from 'prop-types';\nimport withModifyTask from './../../hocs/withModifyTask'\n\nclass AddTask extends Component {\n\n  render() {\n    const { toggleAddTask, addTask, changeValid, changePriority, changeDescription, descriptionInput, currentPriority, isValid } = this.props;\n\n    return (\n      <Dialog toggleDialog={toggleAddTask} title=\"Add new task\">\n        <div className=\"text\">Description:</div>\n        {!isValid && <div className=\"error-msg\">Description too short!</div>}\n        <textarea\n          onChange={changeDescription}\n          value={descriptionInput}\n          className=\"dialog-textarea\"\n        />\n\n        <div className=\"text\">Priority:</div>\n        <select\n          className=\"select\"\n          value={currentPriority}\n          onChange={changePriority}\n          name=\"priority\"\n        >\n          <option value=\"low\">Low</option>\n          <option value=\"normal\">Normal</option>\n          <option value=\"hight\">Hight</option>\n        </select>\n        <br />\n\n        <button\n          onClick={e => {\n            if (descriptionInput.length < 3) changeValid(false);\n            else {\n              changeValid(true);\n\n              addTask(e, {\n                description: descriptionInput,\n                priority: currentPriority,\n                status: 'doIt',\n                createDate: new Date(),\n                id: Date.now() + Math.random(),\n              });\n\n              toggleAddTask();\n            }\n          }}\n          className=\"task-control-btn full-size\"\n        >\n          Add\n        </button>\n      </Dialog>\n    );\n  }\n}\n\nAddTask.propTypes = {\n  toggleAddTask: PropTypes.func.isRequired, // передаём в Dialog, Board function\n  addTask: PropTypes.func.isRequired, // Board function\n  changeValid: PropTypes.func.isRequired,\n  changePriority: PropTypes.func.isRequired,\n  changeDescription: PropTypes.func.isRequired,\n  descriptionInput: PropTypes.string.isRequired,\n  currentPriority: PropTypes.string.isRequired,\n  isValid: PropTypes.bool.isRequired\n};\n\nexport default withModifyTask((props) => (\n  {\n    descriptionInput: '',\n    currentPriority: 'low',\n  }\n))(AddTask);\n","import React, { Component } from 'react';\nimport Dialog from '../Dialog/Dialog';\nimport './style.css';\nimport PropTypes from 'prop-types';\nimport withModifyTask from './../../hocs/withModifyTask'\n\nclass EditTask extends Component {\n\n  render() {\n    const {\n      changeValid,\n      toggleEditTask,\n      currentPriority,\n      descriptionInput,\n      changePriority,\n      taskState: { taskStatus, taskId },\n    } = this.props;\n\n    return (\n      <Dialog toggleDialog={toggleEditTask} title=\"Edit task\">\n        <div>\n          {taskStatus === 'doIt' && this.description}\n\n          <div className=\"text\">Priority:</div>\n          <select\n            className=\"select\"\n            value={currentPriority}\n            onChange={changePriority}\n            name=\"priority\"\n          >\n            <option value=\"low\">Low</option>\n            <option value=\"normal\">Normal</option>\n            <option value=\"hight\">Hight</option>\n          </select>\n          <br />\n\n          <button\n            onClick={e => {\n              if (descriptionInput.length < 3) changeValid(false);\n              else {\n                changeValid(true);\n\n                this.props.editTask(\n                  descriptionInput,\n                  currentPriority,\n                  taskId,\n                ); // передаём измененные данные\n\n                this.props.toggleEditTask();\n              }\n            }}\n            className=\"task-control-btn full-size\"\n          >\n            Edit\n          </button>\n        </div>\n        {taskStatus === 'inProgress' && this.props.editPriority}\n      </Dialog>\n    );\n  }\n\n  get description() {\n    return (\n      <div>\n        <div className=\"text\">Description:</div>\n        {!this.props.isValid && <div className=\"error-msg\">Description too short!</div>}\n        <textarea\n          onChange={this.props.changeDescription}\n          value={this.props.descriptionInput}\n          className=\"dialog-textarea\"\n        />\n      </div>\n    );\n  }\n}\n\nEditTask.propTypes = {\n  taskState: PropTypes.shape({\n    taskDescription: PropTypes.string.isRequired,\n    taskId: PropTypes.number.isRequired,\n    taskPriority: PropTypes.string.isRequired,\n    taskStatus: PropTypes.string.isRequired,\n  }),\n  editTask: PropTypes.func.isRequired, // from Board\n  toggleEditTask: PropTypes.func.isRequired, // from Board\n  changeValid: PropTypes.func.isRequired,\n  changePriority: PropTypes.func.isRequired,\n  changeDescription: PropTypes.func.isRequired,\n  descriptionInput: PropTypes.string.isRequired,\n  currentPriority: PropTypes.string.isRequired,\n  isValid: PropTypes.bool.isRequired\n};\n\nexport default withModifyTask((props) => { // props этого же компонента приходящие из withModifyTask\n  return {\n    descriptionInput: props.taskState.taskDescription, // пускаем в state текущие данные таска\n    currentPriority: props.taskState.taskPriority,\n    isValid: true,\n  }\n})(EditTask);\n","import React, { Component } from 'react';\nimport './style.css';\nimport Task from './../Task/Task';\nimport AddTask from '../AddTask/AddTask';\nimport EditTask from '../EditTask/EditTask';\nimport { Draggable, Droppable } from 'react-drag-and-drop';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nclass Board extends Component {\n  state = {\n    tasks: JSON.parse(localStorage.getItem('tasks')),\n    isAddTaskOpen: false,\n    editTaskState: {\n      isOpen: false,\n      taskStatus: null,\n      taskId: null,\n      taskPriority: null,\n    },\n  };\n\n  deleteTask = taskId => {\n    let newTasks = this.state.tasks.filter(task => task.id !== taskId);\n    localStorage.setItem('tasks', JSON.stringify(newTasks));\n\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks')),\n    });\n  };\n\n  toggleAddTask = () => {\n    this.setState({\n      isAddTaskOpen: !this.state.isAddTaskOpen,\n    });\n  };\n\n  addTask = (event, taskData) => {\n    let newTasks = [...this.state.tasks, taskData];\n\n    localStorage.setItem('tasks', JSON.stringify(newTasks));\n\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks')),\n    });\n  };\n\n  toggleEditTask = ({ id, description, status, priority } = {}) => {\n    this.setState({\n      editTaskState: {\n        isOpen: !this.state.editTaskState.isOpen,\n        taskStatus: status,\n        taskId: id,\n        taskPriority: priority,\n        taskDescription: description,\n      },\n    });\n  };\n\n  editTask = (newDescription, newPriority, taskId) => {\n    let newTasks = [...this.state.tasks];\n    newTasks.forEach(elem => {\n      if (elem.id === taskId) {\n        elem.description = newDescription;\n        elem.priority = newPriority;\n      }\n    });\n\n    localStorage.setItem('tasks', JSON.stringify(newTasks));\n\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks')),\n    });\n  };\n\n  removeAllTasks = () => {\n    localStorage.setItem('tasks', JSON.stringify([]));\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks')),\n    });\n  };\n\n  onDrop = (data, e) => {\n    let column = e.target.closest('.column'); // ищем ближайший род. элемент, если он есть - продолжаем\n    if (column) {\n      let droppedColumnType = column.getAttribute('data-status');\n      let droppedTaskId = Number(Object.values(data).filter(id => Number(id) !== 0)[0]);\n\n      let newTasks = [...this.state.tasks];\n\n      newTasks.forEach(task => {\n        if (task.id === droppedTaskId) task.status = droppedColumnType; // меняем статус нужного таска на тот который указан в родительском data-status\n      });\n\n      localStorage.setItem('tasks', JSON.stringify(newTasks));\n\n      this.setState({\n        tasks: JSON.parse(localStorage.getItem('tasks')),\n      });\n    }\n  };\n\n  renderTasks = status => {\n    // отбираем по статусу - рендерим в колонку\n    let filteredTasks = [...this.state.tasks].filter(task => task.status === status);\n    // сортируем по приоритету и дате создания\n    filteredTasks = filteredTasks.sort((taskA, taskB) => {\n      if (taskA.priority === 'normal' && taskB.priority === 'hight') return 1;\n      if (taskA.priority === 'low' && taskB.priority === 'hight') return 1;\n      if (taskA.priority === 'low' && taskB.priority === 'normal') return 1;\n      if (Number(new Date(taskB.createDate)) < Number(new Date(taskA.createDate))) return -1;\n      if (Number(new Date(taskB.createDate)) > Number(new Date(taskA.createDate))) return 1;\n      return 0;\n    });\n    return filteredTasks.map(task => {\n      // статус сделан tolcase (библиотека приняла решение отказаться работать с camelCase (???))\n      return (\n        <ReactCSSTransitionGroup\n          transitionName=\"task\"\n          transitionAppear={true}\n          transitionAppearTimeout={300}\n          transitionEnter={false}\n          transitionLeave={false}\n          key={task.id}\n        >\n          <Draggable type={task.status.toLowerCase()} data={task.id}>\n            <Task\n              toggleEditTask={this.toggleEditTask}\n              editTask={this.editTask}\n              deleteTask={this.deleteTask}\n              taskData={task}\n            />\n          </Draggable>\n        </ReactCSSTransitionGroup>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-wrapper\">\n          <h1 className=\"board-title\">Kanban Board</h1>\n          <div className=\"board-container\">\n            <Droppable data-status=\"doIt\" onDrop={this.onDrop} types={['']} className=\"column\">\n              <h3 className=\"column-title\">Do it</h3>\n\n              <div className=\"column-tasks\">{this.renderTasks('doIt')}</div>\n            </Droppable>\n\n            <Droppable\n              data-status=\"inProgress\"\n              onDrop={this.onDrop}\n              types={['doit']}\n              className=\"column\"\n            >\n              <h3 className=\"column-title\">In Progress</h3>\n\n              <div className=\"column-tasks\">{this.renderTasks('inProgress')}</div>\n            </Droppable>\n\n            <Droppable\n              data-status=\"done\"\n              onDrop={this.onDrop}\n              types={['inprogress']}\n              className=\"column\"\n            >\n              <h3 className=\"column-title\">Done</h3>\n\n              <div className=\"column-tasks\">{this.renderTasks('done')}</div>\n            </Droppable>\n\n            <Droppable\n              data-status=\"aborted\"\n              onDrop={this.onDrop}\n              types={['inprogress', 'doit']}\n              className=\"column\"\n            >\n              <h3 className=\"column-title\">Aborted</h3>\n\n              <div className=\"column-tasks\">{this.renderTasks('aborted')}</div>\n            </Droppable>\n          </div>\n\n          <button onClick={this.toggleAddTask} className=\"task-control-btn\">\n            Add Task\n          </button>\n          {this.state.tasks.length > 0 && (\n            <button onClick={this.removeAllTasks} className=\"task-control-btn\">\n              Remove all tasks\n            </button>\n          )}\n        </div>\n\n        {this.state.isAddTaskOpen && (\n          <AddTask addTask={this.addTask} toggleAddTask={this.toggleAddTask} />\n        )}\n        {this.state.editTaskState.isOpen && (\n          <EditTask\n            taskState={this.state.editTaskState}\n            editTask={this.editTask}\n            toggleEditTask={this.toggleEditTask}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './app.css';\nimport Board from './components/Board/Board';\n\nclass App extends Component {\n  render() {\n    if(!localStorage.getItem('tasks')) localStorage.setItem('tasks', JSON.stringify([])) // init localstorage\n\n    return (\n      <div>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}