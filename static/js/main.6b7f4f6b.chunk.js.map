{"version":3,"sources":["components/Task/Task.js","components/Dialog/Dialog.js","components/AddTask/AddTask.js","components/EditTask/EditTask.js","components/Board/Board.js","App.js","index.js"],"names":["Task","this","props","taskData","priority","description","createDate","id","status","deleteTask","toggleEditTask","className","onClick","Date","toLocaleDateString","hour","minute","second","Component","Dialog","toggleDialog","title","children","e","target","AddTask","state","descriptionInput","currentPriority","isValid","changeDescription","value","setState","changePriority","toggleAddTask","addTask","onChange","name","length","now","Math","random","EditTask","taskState","taskDescription","taskPriority","taskStatus","taskId","editTask","editPriority","Board","tasks","JSON","parse","localStorage","getItem","isAddTaskOpen","editTaskState","isOpen","newTasks","filter","task","setItem","stringify","event","newDescription","newPriority","forEach","elem","removeAllTasks","onDrop","data","column","closest","droppedColumnType","getAttribute","droppedTaskId","Number","Object","values","renderTasks","filteredTasks","sort","taskA","taskB","map","type","toLowerCase","key","data-status","types","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b7f4f6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\nclass Task extends Component {\n  render() {\n    const { priority, description, createDate, id, status } = this.props.taskData;\n    const deleteTask = this.props.deleteTask;\n    const toggleEditTask = this.props.toggleEditTask;\n\n    return (\n      <div className={`task-container ${priority}`}>\n        <div className=\"task-buttons\">\n          {(status === 'done' || status === 'aborted') && (\n            <button onClick={() => deleteTask(id)} className=\"task-btn task-delete-btn\" />\n          )}\n\n          {(status === 'doIt' || status === 'inProgress') && (\n            <button\n              onClick={() => toggleEditTask(this.props.taskData)}\n              className=\"task-btn task-edit-btn\"\n            />\n          )}\n        </div>\n\n        <div className=\"task-description\">{description}</div>\n        <div className=\"task-date\">\n          Created:{' '}\n          {new Date(createDate).toLocaleDateString('ru-RU', {\n            hour: 'numeric',\n            minute: 'numeric',\n            second: 'numeric',\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nTask.propTypes = {\n  taskData: PropTypes.shape({\n    // данные необходимые для рендера инфы в таске\n    priority: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    createDate: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n  deleteTask: PropTypes.func.isRequired, // Board function\n};\n\nexport default Task;\n","import React, { Component } from 'react';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\nclass Dialog extends Component {\n  render() {\n    const { toggleDialog, title, children } = this.props;\n\n    return (\n      <div\n        onClick={e =>\n          e.target.className === 'dialog-wrapper' || e.target.className === 'dialog-close-btn'\n            ? toggleDialog()\n            : null\n        }\n        className=\"dialog-wrapper\"\n      >\n        <div className=\"dialog-content\">\n          <button className=\"dialog-close-btn\" />\n\n          <h3 className=\"dialog-title\">{title}</h3>\n\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n\nDialog.propTypes = {\n  toggleDialog: PropTypes.func.isRequired, // закрытие / открытие диалога (состояние хранится наверху)\n  title: PropTypes.string,\n  children: PropTypes.node, // контент диалога\n};\n\nexport default Dialog;\n","import React, { Component } from 'react';\nimport Dialog from '../Dialog/Dialog';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\nclass AddTask extends Component {\n  state = {\n    descriptionInput: '',\n    currentPriority: 'low',\n    isValid: true,\n  };\n\n  changeDescription = ({ target: { value } }) => {\n    this.setState({\n      descriptionInput: value,\n    });\n  };\n\n  changePriority = ({ target: { value } }) => {\n    this.setState({\n      currentPriority: value,\n    });\n  };\n\n  render() {\n    const { toggleAddTask, addTask } = this.props;\n\n    return (\n      <Dialog toggleDialog={toggleAddTask} title=\"Add new task\">\n        <div className=\"text\">Description:</div>\n        {!this.state.isValid && <div className=\"error-msg\">Description too short!</div>}\n        <textarea\n          onChange={this.changeDescription}\n          value={this.state.descriptionInput}\n          className=\"dialog-textarea\"\n        />\n\n        <div className=\"text\">Priority:</div>\n        <select\n          className=\"select\"\n          value={this.state.currentPriority}\n          onChange={this.changePriority}\n          name=\"priority\"\n        >\n          <option value=\"low\">Low</option>\n          <option value=\"normal\">Normal</option>\n          <option value=\"hight\">Hight</option>\n        </select>\n        <br />\n\n        <button\n          onClick={e => {\n            if (this.state.descriptionInput.length < 3) this.setState({ isValid: false });\n            else {\n              this.setState({ isValid: true });\n\n              addTask(e, {\n                description: this.state.descriptionInput,\n                priority: this.state.currentPriority,\n                status: 'doIt',\n                createDate: new Date(),\n                id: Date.now() + Math.random(),\n              });\n\n              toggleAddTask();\n            }\n          }}\n          className=\"add-task-btn\"\n        >\n          Add\n        </button>\n      </Dialog>\n    );\n  }\n}\n\nAddTask.propTypes = {\n  toggleAddTask: PropTypes.func.isRequired, // передаём в Dialog, Board function\n  addTask: PropTypes.func.isRequired, // Board function\n};\n\nexport default AddTask;\n","import React, { Component } from 'react';\nimport Dialog from '../Dialog/Dialog';\nimport './style.css';\nimport PropTypes from 'prop-types';\n\nclass EditTask extends Component {\n  state = {\n    descriptionInput: this.props.taskState.taskDescription, // пускаем в state текущие данные таска\n    currentPriority: this.props.taskState.taskPriority,\n    isValid: true,\n  };\n\n  changeDescription = ({ target: { value } }) => {\n    this.setState({\n      descriptionInput: value,\n    });\n  };\n\n  changePriority = ({ target: { value } }) => {\n    this.setState({\n      currentPriority: value,\n    });\n  };\n\n  render() {\n    const {\n      toggleEditTask,\n      taskState: { taskStatus, taskId },\n    } = this.props;\n\n    return (\n      <Dialog toggleDialog={toggleEditTask} title=\"Edit task\">\n        <div>\n          {taskStatus === 'doIt' && this.description}\n\n          <div className=\"text\">Priority:</div>\n          <select\n            className=\"select\"\n            value={this.state.currentPriority}\n            onChange={this.changePriority}\n            name=\"priority\"\n          >\n            <option value=\"low\">Low</option>\n            <option value=\"normal\">Normal</option>\n            <option value=\"hight\">Hight</option>\n          </select>\n          <br />\n\n          <button\n            onClick={e => {\n              if (this.state.descriptionInput.length < 3) this.setState({ isValid: false });\n              else {\n                this.setState({ isValid: true });\n\n                this.props.editTask(\n                  this.state.descriptionInput,\n                  this.state.currentPriority,\n                  taskId,\n                ); // передаём измененные данные\n\n                this.props.toggleEditTask();\n              }\n            }}\n            className=\"add-task-btn\"\n          >\n            Edit\n          </button>\n        </div>\n        {taskStatus === 'inProgress' && this.editPriority}\n      </Dialog>\n    );\n  }\n\n  get description() {\n    return (\n      <div>\n        <div className=\"text\">Description:</div>\n        {!this.state.isValid && <div className=\"error-msg\">Description too short!</div>}\n        <textarea\n          onChange={this.changeDescription}\n          value={this.state.descriptionInput}\n          className=\"dialog-textarea\"\n        />\n      </div>\n    );\n  }\n}\n\nEditTask.propTypes = {\n  taskState: PropTypes.shape({\n    taskDescription: PropTypes.string.isRequired,\n    taskId: PropTypes.number.isRequired,\n    taskPriority: PropTypes.string.isRequired,\n    taskStatus: PropTypes.string.isRequired,\n  }),\n  editTask: PropTypes.func.isRequired, // from Board\n  toggleEditTask: PropTypes.func.isRequired, // from Board\n};\n\nexport default EditTask;\n","import React, { Component } from 'react';\nimport './style.css';\nimport Task from './../Task/Task';\nimport AddTask from '../AddTask/AddTask';\nimport EditTask from '../EditTask/EditTask';\nimport { Draggable, Droppable } from 'react-drag-and-drop';\n\nclass Board extends Component {\n  state = {\n    tasks: JSON.parse(localStorage.getItem('tasks')),\n    isAddTaskOpen: false,\n    editTaskState: {\n      isOpen: false,\n      taskStatus: null,\n      taskId: null,\n      taskPriority: null,\n    },\n  };\n\n  deleteTask = taskId => {\n    let newTasks = this.state.tasks.filter(task => task.id !== taskId)\n    localStorage.setItem('tasks', JSON.stringify(newTasks))\n\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks')),\n    });\n  };\n\n  toggleAddTask = () => {\n    this.setState({\n      isAddTaskOpen: !this.state.isAddTaskOpen,\n    });\n  };\n\n  addTask = (event, taskData) => {\n\n    let newTasks = [...this.state.tasks, taskData]\n\n    localStorage.setItem('tasks', JSON.stringify(newTasks))\n\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks')),\n    });\n  };\n\n  toggleEditTask = ({ id, description, status, priority } = {}) => {\n    this.setState({\n      editTaskState: {\n        isOpen: !this.state.editTaskState.isOpen,\n        taskStatus: status,\n        taskId: id,\n        taskPriority: priority,\n        taskDescription: description,\n      },\n    });\n  };\n\n  editTask = (newDescription, newPriority, taskId) => {\n    let newTasks = [...this.state.tasks]\n    newTasks.forEach(elem => {\n      if (elem.id === taskId) {\n        elem.description = newDescription;\n        elem.priority = newPriority;\n      }\n    });\n\n    localStorage.setItem('tasks', JSON.stringify(newTasks))\n\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks'))\n    })\n  };\n\n  removeAllTasks = () => {\n    localStorage.setItem('tasks', JSON.stringify([]))\n    this.setState({\n      tasks: JSON.parse(localStorage.getItem('tasks'))\n    })\n  }\n\n  onDrop = (data, e) => {\n    let column = e.target.closest('.column') // ищем ближайший род. элемент, если он есть - продолжаем\n    if (column) {\n      let droppedColumnType = column.getAttribute('data-status');\n      let droppedTaskId = Number(Object.values(data).filter(id => Number(id) !== 0)[0]);\n\n      let newTasks = [...this.state.tasks];\n\n      newTasks.forEach(task => {\n        if (task.id === droppedTaskId) task.status = droppedColumnType; // меняем статус нужного таска на тот который указан в родительском data-status\n      });\n\n      localStorage.setItem('tasks', JSON.stringify(newTasks))\n\n      this.setState({\n        tasks: JSON.parse(localStorage.getItem('tasks')),\n      });\n    }\n  };\n\n  renderTasks = status => {\n    // отбираем по статусу - рендерим в колонку\n    let filteredTasks = [...this.state.tasks].filter(task => task.status === status);\n    // сортируем по приоритету и дате создания\n    filteredTasks = filteredTasks.sort((taskA, taskB) => {\n      if (taskA.priority === 'normal' && taskB.priority === 'hight') return 1;\n      if (taskA.priority === 'low' && taskB.priority === 'hight') return 1;\n      if (taskA.priority === 'low' && taskB.priority === 'normal') return 1;\n      if (Number(new Date(taskB.createDate)) < Number(new Date(taskA.createDate))) return -1;\n      if (Number(new Date(taskB.createDate)) > Number(new Date(taskA.createDate))) return 1;\n      return 0;\n    });\n    return filteredTasks.map(task => {\n      // статус сделан tolcase (библиотека приняла решение отказаться работать с camelCase (???))\n      return (\n        <Draggable type={task.status.toLowerCase()} data={task.id} key={task.id}> \n          <Task\n            toggleEditTask={this.toggleEditTask}\n            editTask={this.editTask}\n            deleteTask={this.deleteTask}\n            taskData={task}\n          />\n        </Draggable>\n      );\n    });\n  };\n\n  render() {\n\n    return (\n      <div>\n        <div className=\"board-wrapper\">\n          <h1 className=\"board-title\">Kanban Board</h1>\n          <div className=\"board-container\">\n            <Droppable data-status=\"doIt\" onDrop={this.onDrop} types={['']} className=\"column\">\n              <h3 className=\"column-title\">Do it</h3>\n\n              <div className=\"column-tasks\">{this.renderTasks('doIt')}</div>\n            </Droppable>\n\n            <Droppable\n              data-status=\"inProgress\"\n              onDrop={this.onDrop}\n              types={['doit']}\n              className=\"column\"\n            >\n              <h3 className=\"column-title\">In Progress</h3>\n\n              <div className=\"column-tasks\">{this.renderTasks('inProgress')}</div>\n            </Droppable>\n\n            <Droppable\n              data-status=\"done\"\n              onDrop={this.onDrop}\n              types={['inprogress']}\n              className=\"column\"\n            >\n              <h3 className=\"column-title\">Done</h3>\n\n              <div className=\"column-tasks\">{this.renderTasks('done')}</div>\n            </Droppable>\n\n            <Droppable\n              data-status=\"aborted\"\n              onDrop={this.onDrop}\n              types={['inprogress', 'doit']}\n              className=\"column\"\n            >\n              <h3 className=\"column-title\">Aborted</h3>\n\n              <div className=\"column-tasks\">{this.renderTasks('aborted')}</div>\n            </Droppable>\n          </div>\n\n          <button onClick={this.toggleAddTask} className=\"task-control-btn\">\n            Add Task\n          </button>\n          {this.state.tasks.length > 0 && <button onClick={this.removeAllTasks} className=\"task-control-btn\">\n            Remove all tasks\n          </button>}\n        </div>\n\n        {this.state.isAddTaskOpen && (\n          <AddTask addTask={this.addTask} toggleAddTask={this.toggleAddTask} />\n        )}\n        {this.state.editTaskState.isOpen && (\n          <EditTask\n            taskState={this.state.editTaskState}\n            editTask={this.editTask}\n            toggleEditTask={this.toggleEditTask}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './app.css';\nimport Board from './components/Board/Board';\n\nclass App extends Component {\n  render() {\n    if(!localStorage.getItem('tasks')) localStorage.setItem('tasks', JSON.stringify([])) // init localstorage\n\n    return (\n      <div>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}